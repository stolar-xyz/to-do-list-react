{"version":3,"sources":["App/common/Section/styled.js","App/common/Section/index.js","App/common/Header/styled.js","App/common/Header/index.js","App/common/Container/index.js","App/features/author/AuthorPage.js","App/features/saveDataInLocalStorage.js","App/features/tasks/tasksSlice.js","App/features/tasks/TasksPage/Input/index.js","App/features/tasks/TasksPage/Form/styled.js","App/features/tasks/TasksPage/Form/index.js","App/features/tasks/TasksPage/TaskList/styled.js","App/features/tasks/TasksPage/searchQueryParamName.js","App/routes.js","App/features/tasks/TasksPage/queryParameters.js","App/features/tasks/TasksPage/TaskList/index.js","App/features/tasks/TasksPage/Buttons/styled.js","App/features/tasks/TasksPage/Buttons/index.js","App/features/tasks/TasksPage/Search/styled.js","App/features/tasks/TasksPage/Search/index.js","App/features/themeToggler/styled.js","App/features/themeToggler/themeSlice.js","App/features/themeToggler/ThemeToggler.js","App/features/tasks/TasksPage/index.js","App/features/tasks/TaskPage/index.js","App/common/Navigation/styled.js","App/common/Navigation/index.js","App/theme.js","App/GlobalStyle.js","App/App.js","reportWebVitals.js","App/features/tasks/getExampleTasks.js","App/features/tasks/tasksSaga.js","App/features/themeToggler/themeSaga.js","App/rootSaga.js","App/store.js","index.js"],"names":["StyledSection","styled","section","theme","colors","sectionBackground","Container","div","breakpoints","mobileMax","SubHeaderTitle","h2","subHeader","Wrapper","text","border","Section","title","extraHeaderContent","body","StyledHeader","h1","header","Header","main","AuthorPage","saveDataInLocalStorage","key","value","localStorage","setItem","JSON","stringify","getDataFromLocalStorage","parse","getItem","tasksSlice","createSlice","name","initialState","tasks","hideDone","loading","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","deleteAllTasks","markAllAsDone","forEach","task","removeTask","splice","fetchExampleTasks","setTasks","setLoadingExampleTasks","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","selectAreTasksEmpty","length","selectLoading","Input","input","placeholder","StyledForm","form","Button","button","formButtonText","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","onChange","target","Tasks","ul","Item","li","hidden","css","ItemButton","toggleDone","remove","Content","ItemContent","span","StyledLink","Link","links","searchQueryParamName","toTask","useQueryParameters","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","areTasksEmpty","map","onClick","to","disabled","Loading","Buttons","isEveryTaskDone","stateOfLoading","Search","replaceQueryParameters","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameters","TogglerThemeButton","SunIcon","FaSun","themeToggler","MoonIcon","FaMoon","themeSlice","darkTheme","toggleDarkTheme","selectDarkTheme","ThemeToggler","isThemeDark","TasksPage","TaskPage","useParams","taskId","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","navigation","List","navigationBackground","ListItem","Navigation","exact","lightTheme","mainBackground","GlobalStyle","createGlobalStyle","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksStateInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","saveDarkThemeStateInLocalStorageHandler","themeSaga","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","themeReducer","middleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38cf87d8.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SubHeaderTitle = styled.h2`\r\n    color: ${({ theme }) => theme.colors.subHeader};\r\n    margin: 0;\r\n    padding: 25px;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    color: ${({ theme }) => theme.colors.text};\r\n    padding: 25px;\r\n    border-top: 3px solid ${({ theme }) => theme.colors.border};\r\n    line-height: 1.6;\r\n`;","import { Container, StyledSection, SubHeaderTitle, Wrapper } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <StyledSection>\r\n        <Container>\r\n            <SubHeaderTitle>\r\n                {title}\r\n            </SubHeaderTitle>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Wrapper>\r\n            {body}\r\n        </Wrapper>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n    color: ${({ theme }) => theme.colors.header};\r\n    font-size: 42px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        font-size: 36px;\r\n    }\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title, extraHeaderContent }) => (\r\n    <StyledHeader>\r\n        {title}{extraHeaderContent}\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.main`\r\n    max-width: 1100px;\r\n    padding: 0 10px 20px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default Container;","import Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"About author\" />\r\n        <Section\r\n            title=\"Hi, I'm Andrzej\"\r\n            body={\"I'm a 19yo front-end developer who started coding at the middle of 2019 and fell in love with React. I was motivated to start learning because I wanted to create \\\"something of my own\\\". Initially, after the failure of creating music in FL Studio, I decided to bet on programming... I became interested in Python, but after a few weeks of learning, I realized it wasn't for me. Then I found a channel on Youtube that explained the basics of HTML and CSS. After that I came across with JavaScript and that's how my passion with web development began.\"}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default AuthorPage;","export const saveDataInLocalStorage = (key, value) =>\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n\r\nexport const getDataFromLocalStorage = key =>\r\n    JSON.parse(localStorage.getItem(key));","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getDataFromLocalStorage } from \"../saveDataInLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getDataFromLocalStorage(\"tasks\") || [],\r\n        hideDone: getDataFromLocalStorage(\"hideDone\") || false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteAllTasks: state => {\r\n            state.tasks = [];\r\n        },\r\n        markAllAsDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        fetchExampleTasks: () => {\r\n\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n        setLoadingExampleTasks: (state, { payload }) => {\r\n            state.loading = payload;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    removeTask,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setLoadingExampleTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    };\r\n\r\n    return selectTasks(state).filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n    background-color: ${({ theme }) => theme.colors.input};\r\n    border: 2px solid ${({ theme }) => theme.colors.border};\r\n    padding: 10px;\r\n    color: ${({ theme }) => theme.colors.text};\r\n\r\n    &::placeholder {\r\n        color: ${({ theme }) => theme.colors.placeholder};\r\n    };\r\n`;\r\n\r\nexport default Input;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.formButtonText};\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n    padding: 10px 15px;\r\n    transition: filter 0.3s, transform 0.3s;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover {\r\n        filter: brightness(1.1);\r\n        }\r\n    }\r\n\r\n    &:active {\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../Input\";\r\nimport { Button, StyledForm } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent) {\r\n\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }))\r\n\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"What should I do today?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)} />\r\n            <Button>\r\n                Add task\r\n            </Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const Tasks = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.border};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const ItemButton = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    line-height: 50%;\r\n    padding: 5px;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    transition: color 0.2s, filter 0.2s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        color: #fefefe;\r\n        background-color: ${({ theme }) => theme.colors.button};\r\n\r\n        &:hover {\r\n        filter: brightness(1.1);\r\n        }\r\n    `};\r\n\r\n    ${({ remove }) => remove && css`\r\n        color: crimson;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nexport const ItemContent = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    color: ${({ theme }) => theme.colors.links.task};\r\n    text-decoration: none;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            border-bottom: 1px solid; \r\n        }\r\n    }\r\n`;","const searchQueryParamName = \"search\";\r\n\r\nexport default searchQueryParamName;","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameters = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameters = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        };\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    };\r\n};","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\r\nimport { ItemContent, Item, ItemButton, Tasks, StyledLink, Content } from \"./styled\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery, selectAreTasksEmpty } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport { useQueryParameters } from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameters(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            {areTasksEmpty ?\r\n                <Content>\r\n                    The task list is currently empty. Enjoy your free time!\r\n                </Content>\r\n                :\r\n                <Tasks>\r\n                    {tasks.map(task => (\r\n                        <Item\r\n                            key={task.id}\r\n                            hidden={task.done && hideDone}\r\n                        >\r\n                            <ItemButton\r\n                                toggleDone={task.done}\r\n                                onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n                                <FaCheck title=\"check mark\" />\r\n                            </ItemButton>\r\n                            <ItemContent done={task.done}>\r\n                                <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n                            </ItemContent>\r\n                            <ItemButton\r\n                                remove\r\n                                onClick={() => dispatch(removeTask(task.id))}>\r\n                                <FaTimes title=\"cross mark\" />\r\n                            </ItemButton>\r\n                        </Item>\r\n                    ))}\r\n                </Tasks>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column; \r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin: 15px;\r\n    padding: 0;\r\n    align-self: center;\r\n    cursor: pointer;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    background-color: transparent;\r\n    transition: color 0.2s, filter 0.2s;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            filter: brightness(1.2); \r\n        }\r\n    }\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n        cursor: default;\r\n    `}\r\n\r\n    ${({ loading }) => loading && css`\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n        cursor: default;\r\n    `}\r\n`;\r\n\r\nexport const Loading = styled.span`\r\n    color: ${({ theme }) => theme.colors.disabled};\r\n    margin: 15px;\r\n    align-self: center;\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button, Loading } from \"./styled\";\r\nimport {\r\n    toggleHideDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    selectAreTasksEmpty,\r\n    selectHideDone,\r\n    selectIsEveryTaskDone,\r\n    fetchExampleTasks,\r\n    selectLoading\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const stateOfLoading = useSelector(selectLoading)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {areTasksEmpty ?\r\n                <>\r\n                    {stateOfLoading ?\r\n                        <Loading>\r\n                            Loading...\r\n                        </Loading>\r\n                        :\r\n                        <Button\r\n                            onClick={() => dispatch(fetchExampleTasks())}\r\n                        >\r\n                            Download sample tasks\r\n                        </Button>\r\n                    }\r\n                </>\r\n                :\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(markAllAsDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Mark all as done\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(deleteAllTasks())}\r\n                    >\r\n                        Delete all\r\n                </Button>\r\n                </>\r\n            }\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import Input from \"../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameters, useReplaceQueryParameters } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameters(searchQueryParamName);\r\n    const replaceQueryParameters = useReplaceQueryParameters();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameters({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filter tasks\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Search;","import styled from \"styled-components\";\r\nimport { FaMoon, FaSun } from \"react-icons/fa\";\r\n\r\nexport const TogglerThemeButton = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    line-height: 50%;\r\n    padding: 0px;\r\n    margin-right: 25px;\r\n    font-size: 28px;\r\n    background-color: transparent;\r\n    transition: filter 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(1.2);\r\n    }\r\n`;\r\n\r\nexport const SunIcon = styled(FaSun)`\r\n    color: ${({ theme }) => theme.colors.themeToggler};\r\n`;\r\n\r\nexport const MoonIcon = styled(FaMoon)`\r\n    color: ${({ theme }) => theme.colors.themeToggler};\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getDataFromLocalStorage } from \"../saveDataInLocalStorage\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState: {\r\n        darkTheme: getDataFromLocalStorage(\"darkTheme\"),\r\n    },\r\n    reducers: {\r\n        toggleDarkTheme: state => {\r\n            state.darkTheme = !state.darkTheme;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    toggleDarkTheme,\r\n} = themeSlice.actions;\r\n\r\nexport const selectDarkTheme = state => state.theme.darkTheme;\r\n\r\nexport default themeSlice.reducer;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { MoonIcon, SunIcon, TogglerThemeButton } from \"./styled\";\r\nimport { selectDarkTheme, toggleDarkTheme } from \"./themeSlice\";\r\n\r\nconst ThemeToggler = () => {\r\n    const isThemeDark = useSelector(selectDarkTheme)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <TogglerThemeButton\r\n            onClick={() => dispatch(toggleDarkTheme())}\r\n        >\r\n            {isThemeDark ?\r\n                <SunIcon title=\"sun icon\" />\r\n                :\r\n                <MoonIcon title=\"moon icon\" />\r\n            }\r\n        </TogglerThemeButton>\r\n    );\r\n};\r\n\r\nexport default ThemeToggler;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\nimport ThemeToggler from \"../../themeToggler/ThemeToggler\";\r\n\r\nconst TasksPage = () => (\r\n    <Container>\r\n        <Header\r\n            title=\"To do List\"\r\n            extraHeaderContent={<ThemeToggler />}\r\n        />\r\n        <Section\r\n            title=\"Add new task\"\r\n            body={<Form />}\r\n        />\r\n        <Section\r\n            title=\"Search\"\r\n            body={<Search />}\r\n        />\r\n        <Section\r\n            title=\"Task List\"\r\n            body={<TaskList />}\r\n            extraHeaderContent={<Buttons />}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default TasksPage;\r\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById, setTasks } from \"../tasksSlice\";\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id), (setTasks));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Task details\" />\r\n            <Section\r\n                title={task ? task.content : \"There is no such task on the list, sorry!\"}\r\n                body={task && (\r\n                    <>\r\n                        <strong>Completed:</strong> {task.done ? \"Yes\" : \"No\"}\r\n                    </>\r\n                )\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default TaskPage;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: ${({ theme }) => theme.colors.links.navigation};\r\n    text-decoration: none;\r\n\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            border-bottom: 1px solid; \r\n        }\r\n}\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    background: ${({ theme }) => theme.colors.navigationBackground};\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    padding: 20px;\r\n    font-size: 18px;\r\n`;","import { toAuthor, toTasks } from \"../../routes\";\r\nimport { List, ListItem, StyledNavLink } from \"./styled\";\r\n\r\nconst Navigation = () => (\r\n    <nav>\r\n        <List>\r\n            <ListItem>\r\n                <StyledNavLink exact to={toTasks()}>Tasks</StyledNavLink>\r\n            </ListItem>\r\n            <ListItem>\r\n                <StyledNavLink to={toAuthor()}>Author</StyledNavLink>\r\n            </ListItem>\r\n        </List>\r\n    </nav>\r\n);\r\n\r\nexport default Navigation;","export const lightTheme = {\r\n    colors: {\r\n        header: \"hsl(0, 0%, 96%)\",\r\n        subHeader: \"hsl(180, 100%, 25%)\",\r\n        text: \"hsl(0, 0%, 0%)\",\r\n        button: \"hsl(180, 100%, 25%)\",\r\n        formButtonText: \"hsl(0, 0%, 100%)\",\r\n        themeToggler: \"hsl(0, 0%, 96%)\",\r\n        input: \"hsl(0, 0%, 100%)\",\r\n        placeholder: \"hsl(230, 24%, 56%)\",\r\n        disabled: \"hsl(0, 0%, 67%)\",\r\n        border: \"hsl(270, 6%, 93%)\",\r\n        mainBackground: \"linear-gradient(0deg, rgba(246,246,246,1) 40%, rgba(0,128,128,1) 100%)\",\r\n        sectionBackground: \"hsl(0, 0%, 100%)\",\r\n        navigationBackground: \"transparent\",\r\n\r\n        links: {\r\n            navigation: \"hsl(0, 0%, 100%)\",\r\n            task: \"hsl(180, 100%, 25%)\",\r\n        },\r\n    },\r\n\r\n    breakpoints: {\r\n        mobileMax: 767,\r\n    },\r\n};\r\n\r\nexport const darkTheme = {\r\n    ...lightTheme,\r\n\r\n    colors: {\r\n        header: \"hsl(0, 0%, 90%)\",\r\n        subHeader: \"hsl(0, 0%, 90%)\",\r\n        text: \"hsl(0, 0%, 90%)\",\r\n        button: \"hsl(260, 100%, 70%)\",\r\n        formButtonText: \"hsl(0, 0%, 0%)\",\r\n        themeToggler: \"hsl(260, 100%, 70%)\",\r\n        input: \"hsl(216, 28%, 7%)\",\r\n        placeholder: \"hsl(0, 0%, 67%)\",\r\n        disabled: \"hsl(0, 0%, 67%)\",\r\n        border: \"hsl(0, 0%, 7%)\",\r\n        mainBackground: \"hsl(216, 28%, 7%)\",\r\n        sectionBackground: \"hsl(215, 21%, 11%)\",\r\n        navigationBackground: \"hsl(215, 21%, 11%)\",\r\n\r\n        links: {\r\n            navigation: \"hsl(0, 0%, 90%)\",\r\n            task: \"hsl(0, 0%, 90%)\",\r\n        },\r\n    },\r\n};","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        min-height: 100%;\r\n        background: ${({ theme }) => theme.colors.mainBackground};\r\n    }\r\n\r\n    *,\r\n    *::before,\r\n    *::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n`;","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TasksPage from \"./features/tasks/TasksPage/index\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index\";\r\nimport Navigation from \"./common/Navigation\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { lightTheme, darkTheme } from \"./theme\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectDarkTheme } from \"./features/themeToggler/themeSlice\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\n\r\nconst App = () => {\r\n    const isThemeDark = useSelector(selectDarkTheme)\r\n\r\n    return (\r\n        <ThemeProvider theme={isThemeDark ? darkTheme : lightTheme}>\r\n            <GlobalStyle />\r\n            <HashRouter>\r\n                <Navigation />\r\n                <Switch>\r\n                    <Route path={toTask()}>\r\n                        <TaskPage />\r\n                    </Route>\r\n                    <Route path={toTasks()}>\r\n                        <TasksPage />\r\n                    </Route>\r\n                    <Route path={toAuthor()}>\r\n                        <AuthorPage />\r\n                    </Route>\r\n                    <Route>\r\n                        <Redirect to={toTasks()} />\r\n                    </Route>\r\n                </Switch>\r\n            </HashRouter>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/to-do-list-react/exampleTasks.json\")\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, takeEvery, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveDataInLocalStorage } from \"../saveDataInLocalStorage\";\r\nimport { fetchExampleTasks, selectTasksState, setTasks, setLoadingExampleTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setLoadingExampleTasks(true));\r\n        yield delay(350);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong!\")\r\n    } finally {\r\n        yield put(setLoadingExampleTasks(false));\r\n    };\r\n};\r\n\r\nfunction* saveTasksStateInLocalStorageHandler() {\r\n    const { tasks, hideDone } = yield select(selectTasksState);\r\n    yield call(saveDataInLocalStorage, \"tasks\", tasks);\r\n    yield call(saveDataInLocalStorage, \"hideDone\", hideDone);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksStateInLocalStorageHandler);\r\n};","import { takeLatest, call, select } from \"redux-saga/effects\";\r\nimport { selectDarkTheme, toggleDarkTheme } from \"./themeSlice\";\r\nimport { saveDataInLocalStorage } from \"../saveDataInLocalStorage\";\r\n\r\nfunction* saveDarkThemeStateInLocalStorageHandler() {\r\n    const darkTheme = yield select(selectDarkTheme);\r\n    yield call(saveDataInLocalStorage, \"darkTheme\", darkTheme);\r\n};\r\n\r\nexport function* themeSaga() {\r\n    yield takeLatest(toggleDarkTheme.type, saveDarkThemeStateInLocalStorageHandler);\r\n};\r\n\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\nimport { themeSaga } from \"./features/themeToggler/themeSaga\"\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n        themeSaga(),\r\n    ])\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./features/themeToggler/themeSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./App/store\";\r\nimport { Normalize } from \"styled-normalize\";\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <Provider store={store}>\r\n            <Normalize />\r\n            <App />\r\n        </Provider>\r\n    </StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}